"""
This module implements the PasswordManager for Flask-Auth.
It uses passlib to hash and verify passwords.
"""

# Author: Alejandro Alvarez <jandrikus@gmail.com>
# Copyright (c) 2019 Alejandro Alvarez

from passlib.context import CryptContext

class PasswordManager(object):
	"""Hash and verify user passwords using passlib """
	def __init__(self, app):
		"""
		Create a passlib CryptContext.
		"""
		self.app = app
		self.auth = app.auth
		# Create a passlib CryptContext
		self.password_crypt_context = CryptContext(
			schemes=self.auth.AUTH_PASSLIB_CRYPTCONTEXT_SCHEMES,
			**self.auth.AUTH_PASSLIB_CRYPTCONTEXT_KEYWORDS)

	def hash_password(self, password):
		"""
		Hash plaintext ``password`` using the ``password_hash`` specified in the constructor.
		Args:
			password(str): Plaintext password that the user types in.
		Returns:
			hashed password.
		Example:
			``user.password = hash_password('mypassword')``
		"""
		# Use passlib's CryptContext to hash a password
		password_hash = self.password_crypt_context.encrypt(password)
		return password_hash

	def verify_password(self, password, password_hash):
		"""
		Verify plaintext ``password`` against ``hashed password``.

		Args:
			password(str): Plaintext password that the user types in.
			password_hash(str): Password hash generated by a previous call to ``hash_password()``.
		Returns:
			| True when ``password`` matches ``password_hash``.
			| False otherwise.
		Example:
			::
				if verify_password('mypassword', user.password):
					login_user(user)
		"""
		# Use passlib's CryptContext to verify a password
		return self.password_crypt_context.verify(password, password_hash)

	def set_password(self, password, user):
		user.password = self.hash_password(password)